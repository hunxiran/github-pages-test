(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(6),o=(n(0),n(156)),i=n(158),c={id:"lesson1",title:"Vue 3 Reactivity",sidebar_label:"Introduce"},l={id:"reactivity/lesson1",title:"Vue 3 Reactivity",description:"import useBaseUrl from '@docusaurus/useBaseUrl';\r",source:"@site/docs\\reactivity\\lesson1.md",permalink:"/github-pages-test/docs/reactivity/lesson1",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reactivity/lesson1.md",sidebar_label:"Introduce",sidebar:"someSidebar",previous:{title:"Sharing State",permalink:"/github-pages-test/docs/vueEssential/lesson9"},next:{title:"Proxy and Reflect",permalink:"/github-pages-test/docs/reactivity/lesson2"}},s=[{value:"Understanding Reactivity",id:"understanding-reactivity",children:[{value:"This is not how JavaScript programming usually works",id:"this-is-not-how-javascript-programming-usually-works",children:[]}]},{value:"Saving Code to Run Later",id:"saving-code-to-run-later",children:[{value:"Problem",id:"problem",children:[]},{value:"Solution",id:"solution",children:[]}]},{value:"Problem: Multiple Properties",id:"problem-multiple-properties",children:[]},{value:"Solution: depsMap",id:"solution-depsmap",children:[]},{value:"Problem: Multiple Reactive Objects",id:"problem-multiple-reactive-objects",children:[]}],p={rightToc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this course we will understand the new Vue 3 Reactivity system. Learning how this is built from the ground up will help you understand the design patterns used inside Vue, improve your Vue debugging skills, enable you to use the new Vue 3 modularized Reactivity library, and perhaps even contribute to the Vue 3 source code yourself."),Object(o.b)("p",null,"In this lesson we will start building a simple reactivity system using the very same techniques you\u2019ll find in the Vue 3 source code."),Object(o.b)("h2",{id:"understanding-reactivity"},"Understanding Reactivity"),Object(o.b)("p",null,"Vue\u2019s reactivity system can look like magic when you see it working for the first time."),Object(o.b)("p",null,"Take this simple app:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<div id="app">\n  <div>Price: ${{ product.price }}</div>\n  <div>Total: ${{ product.price * product.quantity }}</div>\n  <div>Taxes: ${{ totalPriceWithTax }}</div>\n</div>\n<script src="https://cdn.jsdelivr.net/npm/vue"><\/script>\n<script>\n  var vm = new Vue({\n    el: \'#app\',\n    data: {\n      product: {\n        price: 5.00,\n        quantity: 2\n      }\n    },\n    computed: {\n      totalPriceWithTax() {\n        return this.product.price * this.product.quantity * 1.03\n      }\n    }\n  })\n<\/script>\n')),Object(o.b)("p",null,"And somehow Vue\u2019s Reactivity system just knows that if price changes, it should do three things:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Update the price value on our webpage."),Object(o.b)("li",{parentName:"ul"},"Recalculate the expression that multiplies price * quantity, and update the page."),Object(o.b)("li",{parentName:"ul"},"Call the totalPriceWithTax function again and update the page.")),Object(o.b)("p",null,"But wait, I hear you wonder, how does Vue\u2019s Reactivity system know what to update when the price changes, and how does it keep track of everything?"),Object(o.b)("h3",{id:"this-is-not-how-javascript-programming-usually-works"},"This is not how JavaScript programming usually works"),Object(o.b)("p",null,"If it\u2019s not obvious to you, programming usually doesn\u2019t work this way. For example, if I run this code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let product = { price: 5, quantity: 2 }\nlet total = product.price * product.quantity  // 10 right?\nproduct.price = 20\nconsole.log(`total is ${total}`)\n")),Object(o.b)("p",null,"What do you think it\u2019s going to print? Since we\u2019re not using Vue, it\u2019s going to print 10."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},">> total is 10")),Object(o.b)("p",null,"In Vue we want ",Object(o.b)("inlineCode",{parentName:"p"},"total")," to get updated whenever ",Object(o.b)("inlineCode",{parentName:"p"},"price")," or ",Object(o.b)("inlineCode",{parentName:"p"},"quantity")," get updated. We want:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},">> total is 40")),Object(o.b)("p",null,"Unfortunately, JavaScript is procedural, not reactive, so this doesn\u2019t work in real life. In order to make total reactive, we have to use JavaScript to make things behave differently."),Object(o.b)("p",null,"For the rest of this lesson and the next 2 after this one, we will be building a Reactivity System from scratch using the same methodology as Vue 3 (which is very different than Vue 2). We will then look into the Vue 3 source code to discover these patterns we wrote from scratch."),Object(o.b)("h2",{id:"saving-code-to-run-later"},"Saving Code to Run Later"),Object(o.b)("h3",{id:"problem"},"Problem"),Object(o.b)("p",null,"As you saw with the code above, in order to start building reactivity we need to save how we\u2019re calculating the total, so we can re-run it when price or quantity changes."),Object(o.b)("h3",{id:"solution"},"Solution"),Object(o.b)("p",null,"First off, we need some way to tell our application, \u201cStore the code (effect) I\u2019m about to run, I may need you to run it at another time.\u201d Then we\u2019ll want to run the code, and if price or quantity variables get updated, run the stored code again."),Object(o.b)("img",{alt:"effect",src:Object(i.a)("/img/reac_lesson1_1.jpg")}),Object(o.b)("p",null,"We might do this by recording the function (effect) so we can run it again."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let product = { price: 5, quantity: 2 }\nlet total = 0\n\nlet effect = function () { \n  total = product.price * product.quantity\n})\n\ntrack() // Remember this in case we want to run it later\neffect() // Also go ahead and run it\n")),Object(o.b)("p",null,"Notice that we store an anonymous function inside the effect variable, and then call a track function. Using the ES6 arrow syntax I could also write this as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let effect = () => { total = product.price * product.quantity }\n")),Object(o.b)("p",null,"In order to define track, we need a place to store our effects, we may have many of them. We\u2019ll create a variable called dep, as in dependency. We call it dependency because typically with the Observer design pattern a dependency has subscribers (in our case effects) which will get notified when an object changes state. We might make dependency a class with an array of subscribers, like we did in the Vue 2 version of this tutorial. However, since all it needs to store is a set of effects, we can simply create a ",Object(o.b)("strong",{parentName:"p"},"Set"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let dep = new Set() // Our object tracking a list of effects\n")),Object(o.b)("p",null,"Then our track function can simply add our effects to this collection:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function track () {\n  dep.add(effect) // Store the current effect\n}\n")),Object(o.b)("p",null,"In case you\u2019re not familiar, the difference between a JavaScript Array and Set, is that a Set cannot have duplicate values and it doesn\u2019t use an index like arrays. Learn more about Set\u2019s ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"}),"here")," if you\u2019re not familiar."),Object(o.b)("p",null,"We\u2019re storing the effect (in our case the { total = price * quantity }) so we can run it later. Here\u2019s a visualization this dep Set:"),Object(o.b)("img",{alt:"effect",src:Object(i.a)("/img/reac_lesson1_2.jpg")}),Object(o.b)("p",null,"Let\u2019s write a trigger function that runs all the things we\u2019ve recorded."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function trigger() { \n  dep.forEach(effect => effect()) \n}\n")),Object(o.b)("p",null,"This goes through all the anonymous functions we have stored inside the dep Set and executes each of them. Then in our code, we can just:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"product.price = 20\nconsole.log(total) // => 10\ntrigger()\nconsole.log(total) // => 40\n")),Object(o.b)("p",null,"Simple enough, right? Here\u2019s the code in its entirety if you need to read through and try to grasp it one more time."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let product = { price: 5, quantity: 2 }\nlet total = 0\nlet dep = new Set()\n\nfunction track() {\n  dep.add(effect)\n}\n\nfunction trigger() {\n  dep.forEach(effect => effect())\n}\n\nlet effect = () => {\n  total = product.price * product.quantity\n}\n\ntrack()\neffect()\n\nproduct.price = 20\nconsole.log(total) // => 10\n\ntrigger()\nconsole.log(total) // => 40\n")),Object(o.b)("h2",{id:"problem-multiple-properties"},"Problem: Multiple Properties"),Object(o.b)("p",null,"We could go on tracking effects as needed, but our reactive objects are going to have different properties, and those properties each need their own ",Object(o.b)("inlineCode",{parentName:"p"},"dep")," (which is a set of ",Object(o.b)("inlineCode",{parentName:"p"},"effects"),"). Take a look at our object here:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let product = { price: 5, quantity: 2 }\n")),Object(o.b)("p",null,"Our ",Object(o.b)("inlineCode",{parentName:"p"},"price")," property needs it\u2019s own dep (set of ",Object(o.b)("inlineCode",{parentName:"p"},"effects"),") and our ",Object(o.b)("inlineCode",{parentName:"p"},"quantity")," needs it\u2019s own ",Object(o.b)("inlineCode",{parentName:"p"},"dep")," (set of ",Object(o.b)("inlineCode",{parentName:"p"},"effects"),"). Let\u2019s build out our solution to properly record these."),Object(o.b)("h2",{id:"solution-depsmap"},"Solution: depsMap"),Object(o.b)("p",null,"When we call track or trigger we now need to know which property in our object we\u2019re targeting (",Object(o.b)("inlineCode",{parentName:"p"},"price")," or ",Object(o.b)("inlineCode",{parentName:"p"},"quantity"),"). To do this we\u2019ll create a ",Object(o.b)("inlineCode",{parentName:"p"},"depsMap"),", which is of type ",Object(o.b)("strong",{parentName:"p"},"Map")," (think keys and values). Here\u2019s how we might visualize it:"),Object(o.b)("img",{alt:"effect",src:Object(i.a)("/img/reac_lesson1_3.jpg")}),Object(o.b)("p",null,"Notice how the ",Object(o.b)("inlineCode",{parentName:"p"},"depsMap")," has a key which will be the property name we want to add (or track) a new ",Object(o.b)("inlineCode",{parentName:"p"},"effect")," on. So we\u2019ll need to send in this key to the ",Object(o.b)("inlineCode",{parentName:"p"},"track")," function."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const depsMap = new Map()\nfunction track(key) {\n  // Make sure this effect is being tracked.\n  let dep = depsMap.get(key) // Get the current dep (effects) that need to be run when this key (property) is set\n  if (!dep) {\n    // There is no dep (effects) on this key yet\n    depsMap.set(key, (dep = new Set())) // Create a new Set\n  }\n  dep.add(effect) // Add effect to dep\n}\n  }\nfunction trigger(key) {\n  let dep = depsMap.get(key) // Get the dep (effects) associated with this key\n  if (dep) { // If they exist\n    dep.forEach(effect => {\n      // run them all\n      effect()\n    })\n  }\n}\n\nlet product = { price: 5, quantity: 2 }\nlet total = 0\n\nlet effect = () => {\n  total = product.price * product.quantity\n}\n\ntrack('quantity')\neffect()\nconsole.log(total) // --\x3e 10\n\nproduct.quantity = 3\ntrigger('quantity')\nconsole.log(total) // --\x3e 40\n")),Object(o.b)("h2",{id:"problem-multiple-reactive-objects"},"Problem: Multiple Reactive Objects"),Object(o.b)("p",null,"This works great, until we have multiple reactive objects (more than just product) which need to track effects. Now we need a way of storing a ",Object(o.b)("inlineCode",{parentName:"p"},"depsMap")," for each object (ex. product). We need another Map, one for each object, but what would be the key? If we use a ",Object(o.b)("strong",{parentName:"p"},"WeakMap")," we can actually use the objects themselves as the key. ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap"}),"WeakMap")," is a JavaScript Map that uses only objects as the key. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let product = { price: 5, quantity: 2 }\nconst targetMap = new WeakMap()\ntargetMap.set(product, "example code to test")\nconsole.log(targetMap.get(product)) // ---\x3e "example code to test"\n')),Object(o.b)("p",null,"Obviously this isn\u2019t the code we\u2019re going to use, but I wanted to show you how our ",Object(o.b)("inlineCode",{parentName:"p"},"targetMap")," uses our product object as the key. We call our WeakMap ",Object(o.b)("inlineCode",{parentName:"p"},"targetMap")," because we\u2019ll consider target the object we\u2019re targeting. There\u2019s another reason it\u2019s called target which will become more obvious in the next lesson. Here is what we have visualized:"),Object(o.b)("img",{alt:"effect",src:Object(i.a)("/img/reac_lesson1_4.jpg")}),Object(o.b)("p",null,"When we call ",Object(o.b)("inlineCode",{parentName:"p"},"track")," or ",Object(o.b)("inlineCode",{parentName:"p"},"trigger")," we now need to know which object we\u2019re targeting. So, we\u2019ll send in both the target and the key when we call it."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const targetMap = new WeakMap() // targetMap stores the effects that each object should re-run when it's updated\n\nfunction track(target, key) {\n  // We need to make sure this effect is being tracked.\n  let depsMap = targetMap.get(target) // Get the current depsMap for this target\n\n  if (!depsMap) {\n    // There is no map.\n    targetMap.set(target, (depsMap = new Map())) // Create one\n  }\n\n  let dep = depsMap.get(key) // Get the current dependencies (effects) that need to be run when this is set\n  if (!dep) {\n    // There is no dependencies (effects)\n    depsMap.set(key, (dep = new Set())) // Create a new Set\n  }\n\n  dep.add(effect) // Add effect to dependency map\n}\n\nfunction trigger(target, key) {\n  const depsMap = targetMap.get(target) // Does this object have any properties that have dependencies (effects)\n  if (!depsMap) {\n    return\n  }\n\n  let dep = depsMap.get(key) // If there are dependencies (effects) associated with this\n  if (dep) {\n    dep.forEach(effect => {\n      // run them all\n      effect()\n    })\n  }\n}\n\nlet product = { price: 5, quantity: 2 }\nlet total = 0\nlet effect = () => {\n  total = product.price * product.quantity\n}\n\ntrack(product, 'quantity')\neffect()\nconsole.log(total) // --\x3e 10\n\nproduct.quantity = 3\ntrigger(product, 'quantity')\nconsole.log(total) // --\x3e 15\n")),Object(o.b)("p",null,"So now we have a very effective way of tracking the dependencies on multiple objects, this is a big piece of the puzzle when building our reactivity system. Give yourself a pat on the back. The battle is half over. In the next lesson we will discover how to call ",Object(o.b)("inlineCode",{parentName:"p"},"track")," and ",Object(o.b)("inlineCode",{parentName:"p"},"trigger")," automatically using ES6 proxy."))}u.isMDXComponent=!0},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,h=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return n?r.a.createElement(h,c({ref:t},s,{components:n})):r.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},157:function(e,t,n){"use strict";var a=n(0),r=n(35);t.a=function(){return Object(a.useContext)(r.a)}},158:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(157);function r(e){const{siteConfig:t}=Object(a.a)(),{baseUrl:n="/"}=t||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?n+e.slice(1):n+e}}}]);