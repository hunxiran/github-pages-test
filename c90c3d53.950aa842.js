(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{139:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(1),r=n(6),o=(n(0),n(156)),i=n(158),s={id:"lesson1",title:"Build a Reactivity System",sidebar_label:"Lesson1"},c={id:"advanceComp/lesson1",title:"Build a Reactivity System",description:"import useBaseUrl from '@docusaurus/useBaseUrl';\r",source:"@site/docs\\advanceComp\\lesson1.md",permalink:"/github-pages-test/docs/advanceComp/lesson1",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/advanceComp/lesson1.md",sidebar_label:"Lesson1",sidebar:"someSidebar",previous:{title:"Powered by MDX",permalink:"/github-pages-test/docs/mdx"},next:{title:"Evan You on Proxies",permalink:"/github-pages-test/docs/advanceComp/lesson2"}},l=[{value:"The Reactivity System",id:"the-reactivity-system",children:[]},{value:"Problem",id:"problem",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Problem",id:"problem-1",children:[]},{value:"Solution: A Dependency Class",id:"solution-a-dependency-class",children:[]},{value:"Problem",id:"problem-2",children:[]},{value:"Solution: A Watcher Function",id:"solution-a-watcher-function",children:[]},{value:"Problem",id:"problem-3",children:[]},{value:"Solution: Object.defineProperty()",id:"solution-objectdefineproperty",children:[]},{value:"Putting both ideas together",id:"putting-both-ideas-together",children:[]},{value:"Jumping to Vue",id:"jumping-to-vue",children:[]},{value:"So what have we learned?",id:"so-what-have-we-learned",children:[]}],u={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this lesson we will build a simple reactivity system using the very same techniques you\u2019ll find in the Vue source code. This will give you a better understanding of Vue.js and it\u2019s design patterns, as well as get you familiar with watchers and the Dep class."),Object(o.b)("h2",{id:"the-reactivity-system"},"The Reactivity System"),Object(o.b)("p",null,"Vue\u2019s reactivity system can look like magic when you see it working for the first time."),Object(o.b)("p",null,"Take this simple app:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<div id="app">\n  <div>Price: ${{ price }}</div>\n  <div>Total: ${{ price * quantity }}</div>\n  <div>Taxes: ${{ totalPriceWithTax }}</div>\n</div>\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"<script src=\"https://cdn.jsdelivr.net/npm/vue\"><\/script>\n    <script>\n      var vm = new Vue({\n        el: '#app',\n        data: {\n          price: 5.00,\n          quantity: 2\n        },\n        computed: {\n          totalPriceWithTax() {\n            return this.price * this.quantity * 1.03\n          }\n        }\n      })\n<\/script>\n")),Object(o.b)("p",null,"And somehow Vue just knows that if price changes, it should do three things:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Update the price value on our webpage."),Object(o.b)("li",{parentName:"ul"},"Recalculate the expression that multiplies price ","*"," quantity, and update the page."),Object(o.b)("li",{parentName:"ul"},"Call the totalPriceWithTax function again and update the page.")),Object(o.b)("p",null,"But wait, I hear you wonder, how does Vue know what to update when the price changes, and how does it keep track of everything?"),Object(o.b)("h4",{id:"this-is-not-how-javascript-programming-usually-works"},"This is not how JavaScript programming usually works"),Object(o.b)("p",null,"If it\u2019s not obvious to you, the big problem we have to address is that programming usually doesn\u2019t work this way. For example, if I run this code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let price = 5;\nlet quantity = 2;\nlet total = price * quantity; // 10 right?\nprice = 20;\nconsole.log(`total is ${total}`);\n")),Object(o.b)("p",null,"What do you think it\u2019s going to print? Since we\u2019re not using Vue, it\u2019s going to print 10."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"> > total is 10\n")),Object(o.b)("p",null,"In Vue we want ",Object(o.b)("inlineCode",{parentName:"p"},"total")," to get updated whenever ",Object(o.b)("inlineCode",{parentName:"p"},"price")," or ",Object(o.b)("inlineCode",{parentName:"p"},"quantity")," get updated. We want:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"> > total is 40\n")),Object(o.b)("p",null,"Unfortunately, JavaScript is procedural, not reactive, so this doesn\u2019t work in real life. In order to make ",Object(o.b)("inlineCode",{parentName:"p"},"total")," reactive, we have to use JavaScript to make things behave differently."),Object(o.b)("h2",{id:"problem"},"Problem"),Object(o.b)("p",null,"We need to save how we\u2019re calculating the ",Object(o.b)("inlineCode",{parentName:"p"},"total"),", so we can re-run it when ",Object(o.b)("inlineCode",{parentName:"p"},"price")," or ",Object(o.b)("inlineCode",{parentName:"p"},"quantity")," changes."),Object(o.b)("h2",{id:"solution"},"Solution"),Object(o.b)("p",null,"First off, we need some way to tell our application, \u201cThe code I\u2019m about to run, store this, I may need you to run it at another time.\u201d Then we\u2019ll want to run the code, and if price or quantity variables get updated, run the stored code again."),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_1.png")}),Object(o.b)("p",null,"We might do this by recording the function so we can run it again."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let price = 5;\nlet quantity = 2;\nlet total = 0;\nlet target = null;\n\ntarget = function() {\n  total = price * quantity;\n};\n\nrecord(); // Remember this in case we want to run it later\ntarget(); // Also go ahead and run it\n")),Object(o.b)("p",null,"Notice that we store an anonymous function inside the target variable, and then call a record function. Using the ES6 arrow syntax I could also write this as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"target = () => {\n  total = price * quantity;\n};\n")),Object(o.b)("p",null,"The definition of the record is simply:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let storage = []; // We'll store our target functions in here\n\nfunction record() {\n  // target = () => { total = price * quantity }\n  storage.push(target);\n}\n")),Object(o.b)("p",null,"We\u2019re storing the ",Object(o.b)("inlineCode",{parentName:"p"},"target")," (in our case the ",Object(o.b)("inlineCode",{parentName:"p"},"{ total = price \\* quantity }"),") so we can run it later, perhaps with a ",Object(o.b)("inlineCode",{parentName:"p"},"replay"),"function that runs all the things we\u2019ve recorded."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function replay() {\n  storage.forEach(run => run());\n}\n")),Object(o.b)("p",null,"This goes through all the anonymous functions we have stored inside the storage array and executes each of them."),Object(o.b)("p",null,"Then in our code, we can just:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"price = 20;\nconsole.log(total); // => 10\nreplay();\nconsole.log(total); // => 40\n")),Object(o.b)("p",null,"Simple enough, right? Here\u2019s the code in it\u2019s entirety if you need to read through and try to grasp it one more time. FYI, I am coding this in a particular way, in case you\u2019re wondering why."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let price = 5;\nlet quantity = 2;\nlet total = 0;\nlet target = null;\nlet storage = [];\n\nfunction record() {\n  storage.push(target);\n}\n\nfunction replay() {\n  storage.forEach(run => run());\n}\n\ntarget = () => {\n  total = price * quantity;\n};\n\nrecord();\ntarget();\n\nprice = 20;\nconsole.log(total); // => 10\nreplay();\nconsole.log(total); // => 40\n")),Object(o.b)("h2",{id:"problem-1"},"Problem"),Object(o.b)("p",null,"We could go on recording targets as needed, but it\u2019d be nice to have a more robust solution that will scale with our app. Perhaps a class that takes care of maintaining a list of targets that get notified when we need them to get re-run."),Object(o.b)("h2",{id:"solution-a-dependency-class"},"Solution: A Dependency Class"),Object(o.b)("p",null,"One way we can begin to solve this problem is by encapsulating this behavior into its own class, a Dependency Class which implements the standard programming observer pattern."),Object(o.b)("p",null,"So, if we create a JavaScript class to manage our dependencies (which is closer to how Vue handles things), it might look like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dep {\n  // Stands for dependency\n  constructor() {\n    this.subscribers = []; // The targets that are dependent, and should be\n    // run when notify() is called.\n  }\n  depend() {\n    // This replaces our record function\n    if (target && !this.subscribers.includes(target)) {\n      // Only if there is a target & it's not already subscribed\n      this.subscribers.push(target);\n    }\n  }\n  notify() {\n    // Replaces our replay function\n    this.subscribers.forEach(sub => sub()); // Run our targets, or observers.\n  }\n}\n")),Object(o.b)("p",null,"Notice instead of storage we\u2019re now storing our anonymous functions in subscribers. ","*","*","*","*","Instead of our record function we now call depend ","*","*","*","*","and we now use notify instead of replay. To get this running:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const dep = new Dep();\n\nlet price = 5;\nlet quantity = 2;\nlet total = 0;\nlet target = () => {\n  total = price * quantity;\n};\ndep.depend(); // Add this target to our subscribers\ntarget(); // Run it to get the total\n\nconsole.log(total); // => 10 .. The right number\nprice = 20;\nconsole.log(total); // => 10 .. No longer the right number\ndep.notify(); // Run the subscribers\nconsole.log(total); // => 40  .. Now the right number\n")),Object(o.b)("p",null,"It still works, and now our code feels more reusable. Only thing that still feels a little weird is the setting and running of the target."),Object(o.b)("h2",{id:"problem-2"},"Problem"),Object(o.b)("p",null,"In the future we\u2019re going to have a Dep class for each variable, and it\u2019ll be nice to encapsulate the behavior of creating anonymous functions that need to be watched for updates. Perhaps a watcher function might be in order to take care of this behavior."),Object(o.b)("p",null,"So instead of calling:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"target = () => {\n  total = price * quantity;\n};\ndep.depend();\ntarget();\n")),Object(o.b)("p",null,"(this is just the code from above)"),Object(o.b)("p",null,"We can instead just call:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"watcher(() => {\n  total = price * quantity;\n});\n")),Object(o.b)("h2",{id:"solution-a-watcher-function"},"Solution: A Watcher Function"),Object(o.b)("p",null,"Inside our Watcher fucntion we can do a few simple things:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function watcher(myFunc) {\n  target = myFunc; // Set as the active target\n  dep.depend(); // Add the active target as a dependency\n  target(); // Call the target\n  target = null; // Reset the target\n}\n")),Object(o.b)("p",null,"As you can see, the watcher function takes a myFunc argument, sets that as a our global target property, calls dep.depend() to add our target as a subscriber, calls the target function, and resets the target."),Object(o.b)("p",null,"Now when we run the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"price = 20\nconsole.log(total) //10\ndep.notify()\nconsole.log(total) //40\n")),Object(o.b)("p",null,"You might be wondering why we implemented target as a global variable, rather than passing it into our functions where needed. There is a good reason for this, which will become obvious by the end of our article."),Object(o.b)("h2",{id:"problem-3"},"Problem"),Object(o.b)("p",null,"We have a single Dep class, but what we really want is each of our variables to have its own Dep. Let me move things into properties before we go any further."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let data = { price: 5, quantity: 2 };\n")),Object(o.b)("p",null,"Let\u2019s assume for a minute that each of our properties (price and quantity) have their own internal Dep class."),Object(o.b)("img",{alt:"lesson1_2",src:Object(i.a)("/img/advan_lesson1_2.png")}),Object(o.b)("p",null,"Now when we run:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"watcher(() => {\n  total = data.price * data.quantity;\n});\n")),Object(o.b)("p",null,"Since the data.price value is accessed (which it is), I want the price property\u2019s Dep class to push our anonymous function (stored in target) onto its subscriber array (by calling dep.depend()). Since data.quantity is accessed I also want the quantity property Dep class to push this anonymous function (stored in target) into its subscriber array."),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_3.png")}),Object(o.b)("p",null,"If I have another anonymous function where just data.price is accessed, I want that pushed just to the price property Dep class."),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_4.png")}),Object(o.b)("p",null,"When do I want dep.notify() to be called on price\u2019s subscribers? I want them to be called when price is set. By the end of the article I want to be able to go into the console and do:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"> > total\n10\n> > price = 20 // When this gets run it will need to call notify() on the price\n> > total\n40\n")),Object(o.b)("p",null,"We need some way to hook into a data property (like price or quantity) so when it\u2019s accessed we can save the target into our subscriber array, and when it\u2019s changed run the functions stored our subscriber array."),Object(o.b)("h2",{id:"solution-objectdefineproperty"},"Solution: Object.defineProperty()"),Object(o.b)("p",null,"We need to learn about the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"}),"Object.defineProperty()")," function which is plain ES5 JavaScript. It allows us to define getter and setter functions for a property. Lemme show you the very basic usage, before I show you how we\u2019re going to use it with our Dep class."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let data = { price: 5, quantity: 2 };\n\nObject.defineProperty(data, "price", {\n  // For just the price property\n\n  get() {\n    // Create a get method\n    console.log(`I was accessed`);\n  },\n\n  set(newVal) {\n    // Create a set method\n    console.log(`I was changed`);\n  }\n});\ndata.price; // This calls get()\ndata.price = 20; // This calls set()\n')),Object(o.b)("p",null,"As you can see, it just logs two lines. However, it doesn\u2019t actually get or set any values, since we over-rode the functionality. Let\u2019s add it back now. get() expects to return a value, and set() still needs to update a value, so let\u2019s add an internalValue variable to store our current price value."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let data = { price: 5, quantity: 2 };\n\nlet internalValue = data.price; // Our initial value.\n\nObject.defineProperty(data, "price", {\n  // For just the price property\n\n  get() {\n    // Create a get method\n    console.log(`Getting price: ${internalValue}`);\n    return internalValue;\n  },\n\n  set(newVal) {\n    // Create a set method\n    console.log(`Setting price to: ${newVal}`);\n    internalValue = newVal;\n  }\n});\ntotal = data.price * data.quantity; // This calls get()\ndata.price = 20; // This calls set()\n')),Object(o.b)("p",null,"Now that our get and set are working properly, what do you think will print to the console?"),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_5.png")}),Object(o.b)("p",null,"So we have a way to get notified when we get and set values. And with some recursion we can run this for all items in our data array, right?"),Object(o.b)("p",null,"FYI, ",Object(o.b)("inlineCode",{parentName:"p"},"Object.keys(data)")," returns an array of the keys of the object."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let data = { price: 5, quantity: 2 };\n\nObject.keys(data).forEach(key => {\n  // We're running this for each item in data now\n  let internalValue = data[key];\n  Object.defineProperty(data, key, {\n    get() {\n      console.log(`Getting ${key}: ${internalValue}`);\n      return internalValue;\n    },\n    set(newVal) {\n      console.log(`Setting ${key} to: ${newVal}`);\n      internalValue = newVal;\n    }\n  });\n});\ntotal = data.price * data.quantity;\ndata.price = 20;\n")),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_6.png")}),Object(o.b)("p",null,"Now everything has getters and setters, and we see this on the console."),Object(o.b)("h2",{id:"putting-both-ideas-together"},"Putting both ideas together"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"total = data.price * data.quantity;\n")),Object(o.b)("p",null,"When a piece of code like this gets run and gets the value of price, we want price to remember this anonymous function (target). That way if price gets changed, or is set to a new value, it\u2019ll trigger this function to get rerun, since it knows this line is dependent upon it. So you can think of it like this."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Get")," => Remember this anonymous function, we\u2019ll run it again when our value changes."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Set")," => Run the saved anonymous function, our value just changed."),Object(o.b)("p",null,"Or in the case of our Dep Class"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Price accessed (get)")," => call ",Object(o.b)("inlineCode",{parentName:"p"},"dep.depend()")," to save the current ",Object(o.b)("inlineCode",{parentName:"p"},"target")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Price set")," => call ",Object(o.b)("inlineCode",{parentName:"p"},"dep.notify()")," on price, re-running all the ",Object(o.b)("inlineCode",{parentName:"p"},"targets")),Object(o.b)("p",null,"Let\u2019s combine these two ideas, and walk through our final code."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let data = { price: 5, quantity: 2 };\nlet target = null;\n\n// This is exactly the same Dep class\nclass Dep {\n  constructor() {\n    this.subscribers = [];\n  }\n  depend() {\n    if (target && !this.subscribers.includes(target)) {\n      // Only if there is a target & it's not already subscribed\n      this.subscribers.push(target);\n    }\n  }\n  notify() {\n    this.subscribers.forEach(sub => sub());\n  }\n}\n\n// Go through each of our data properties\nObject.keys(data).forEach(key => {\n  let internalValue = data[key];\n\n  // Each property gets a dependency instance\n  const dep = new Dep();\n\n  Object.defineProperty(data, key, {\n    get() {\n      dep.depend(); // <-- Remember the target we're running\n      return internalValue;\n    },\n    set(newVal) {\n      internalValue = newVal;\n      dep.notify(); // <-- Re-run stored functions\n    }\n  });\n});\n\n// My watcher no longer calls dep.depend,\n// since that gets called from inside our get method.\nfunction watcher(myFunc) {\n  target = myFunc;\n  target();\n  target = null;\n}\n\nwatcher(() => {\n  data.total = data.price * data.quantity;\n});\n")),Object(o.b)("p",null,"And now look at what happens in our console when we play around."),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_7.png")}),Object(o.b)("p",null,"Exactly what we were hoping for! Both price and quantity are indeed reactive! Our total code gets re-run whenever the value of price or quantity gets updated."),Object(o.b)("h2",{id:"jumping-to-vue"},"Jumping to Vue"),Object(o.b)("p",null,"This illustration from the Vue docs should start to make sense now."),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_8.png")}),Object(o.b)("p",null,"Reactivity Cycle"),Object(o.b)("p",null,"Do you see that beautiful purple Data circle with the getters and setters? It should look familiar! Every component instance has a watcher instance (in blue) which collects dependencies from the getters (red line). When a setter is called later, it notifies the watcher which causes the component to re-render. Here\u2019s the image again with some of my own annotations."),Object(o.b)("img",{alt:"Docusaurus",src:Object(i.a)("/img/advan_lesson1_9.png")}),Object(o.b)("p",null,"Yeah, doesn\u2019t this make a whole lot more sense now?"),Object(o.b)("p",null,"Obviously how Vue does this under the covers is more complex, but you now know the basics. In the next lesson we\u2019ll dive under the hood with Vue, and see if we can find this pattern inside the source code."),Object(o.b)("h2",{id:"so-what-have-we-learned"},"So what have we learned?"),Object(o.b)("p",null,"How to create a ",Object(o.b)("strong",{parentName:"p"},"Dep class")," which collects a dependencies (depend) and re-runs all dependencies (notify).\nHow to create a ",Object(o.b)("strong",{parentName:"p"},"watcher")," to manage the code we\u2019re running, that may need to be added (target) as a dependency.\nHow to use ",Object(o.b)("strong",{parentName:"p"},"Object.defineProperty()")," to create getters and setters."))}p.isMDXComponent=!0},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(i,".").concat(d)]||p[d]||b[d]||o;return n?r.a.createElement(h,s({ref:t},l,{components:n})):r.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},157:function(e,t,n){"use strict";var a=n(0),r=n(35);t.a=function(){return Object(a.useContext)(r.a)}},158:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(157);function r(e){const{siteConfig:t}=Object(a.a)(),{baseUrl:n="/"}=t||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?n+e.slice(1):n+e}}}]);